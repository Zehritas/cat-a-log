@page "/";
@using cat_a_logB.Data
@using cat_a_logB;
@using ApexCharts;
@inject cat_a_logB.Pages.SampleData SampleData

<PageTitle>Gantt Chart</PageTitle>

<div class="mb-2 btn-list">
    <Button Size=ButtonSize.Small OnClick=AddXAxisAnnotation BackgroundColor="TablerColor.Primary">Add XAxis Annotation</Button>
</div>

<DemoContainer>

    @if (project == null)
    {
        <div class="text-center text-muted" style="min-height: 300px">
            <h3>Loading chart<span class="animated-dots"></span></h3>
        </div>
    }
    else
    {
        <ApexChart OnClick=OnClick @ref=chart TItem="GanttData" Title="Project Gantt chart" Options="options"
            XAxisType="XAxisType.Datetime">

            <ApexPointTooltip>

                <div class="m-2">
                    @{
                        var point = (ListPoint<GanttData>)context.DataPoint;

                        <h4>@point.X</h4>
                        <span>Deadline: @point.Items.First().EndDate.ToShortDateString()</span>
                        <br>
                        <span>Team: @point.Items.First().Team.Name</span>
                        <br>
                        <span>@CompareUserProgress(point.Items.First(), point.Items.First().Progress)</span>


                    }
                </div>
            </ApexPointTooltip>

            <ChildContent>
                @foreach (var team in teams)
    {
        <ApexRangeSeries TItem="GanttData" 
                         Items="project.Where(task => task.Team == team)"
                         Name="@team.Name"
                         XValue="@(e => e.Name)"
                         YMinValue="@(e => e.StartDate.ToUnixTimeMilliseconds())"
                         YMaxValue="@(e => e.EndDate.ToUnixTimeMilliseconds())" 
                         PointColor="e => e.PointColor" 
                         OrderByDescending="e => e.Items.First().Team.Name" />
    }
            </ChildContent>


        </ApexChart>
    }

</DemoContainer>



@if (selectedData != null && selectedData.DataPoint != null)
{
    <div class="alert alert-info">
        <h3>Edit: @selectedData.DataPoint.X</h3>
    </div>

    <button class="btn btn-primary" @onclick="AddProgress">Update Progress</button>
    <form>
        <!-- Buttons for editing tasks -->
        <button type="button" class="btn btn-primary" @onclick="RemoveTask">Remove Task</button>
        <button type="button" class="btn btn-primary" @onclick="ToggleEditTaskName">Edit Task Name</button>
        <button type="button" class="btn btn-primary" @onclick="ToggleEditTaskTime">Edit Task Time</button>
        <button type="button" class="btn btn-primary" @onclick="ToggleEditComments">Comments</button>

    </form>
    @if (showEditTaskNameInput)
    {
        <form>
            <div class="form-group">
                <label for="newTaskName">New Task Name:</label>
                <input type="text" class="form-control" id="newTaskName" @bind="newTaskName" />
            </div>
            <br>
            <button type="button" class="btn btn-success" @onclick="UpdateTaskName">Update Task Name</button>
        </form>
    }
    @if (showEditTaskTimeInput)
    {
        <form>
            <div class="form-group">
                <label for="newTaskStartTime">Start Date:</label>
                <input type="date" class="form-control" id="newTaskStartTime" @bind="newTaskStartTime" />
            </div>
            <div class="form-group">
                <label for="newTaskEndTime">End Date:</label>
                <input type="date" class="form-control" id="newTaskEndTime" @bind="newTaskEndTime" />
            </div>
            <br>
            <button type="button" class="btn btn-success" @onclick="UpdateTaskTime">Update Task Time</button>
        </form>
    }
    @if (showEditProgressInput)
    {
        <form>
            <div class="form-group">
                <label for="progressInput">Select Progress:</label>
                <select class="form-control" id="progressInput" @bind="newProgress">
                    @foreach (var progressOption in progressOptions)
                    {
                        <option value="@progressOption">@progressOption%</option>
                    }
                </select>
            </div>
            <button type="button" class="btn btn-success" @onclick="() => UpdateProgress(newProgress)">Update Progress</button>
        </form>
    }
    @if (showEditCommentsModal)
    {
        <div class="modal fade show" style="display: block;" tabindex="-1" role="dialog" id="editCommentsModal">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">@selectedData.DataPoint.Items.First().Name Comments </h5>
                        <button type="button" class="close" @onclick="CloseEditCommentsModal">
                            <span aria-hidden="true">×</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <div class="form-group">
                            <label for="newComments">Comments:</label>
                            <textarea class="form-control" id="newComments" @bind="editedComments"></textarea>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CloseEditCommentsModal">Close</button>
                        <button type="button" class="btn btn-success" @onclick="UpdateComments">Save Changes</button>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal-backdrop fade show"></div>
    }

    <div class="mt-4">
        <h4>Task Information:</h4>
        <ul class="list-group">
            <li class="list-group-item">Task Name: @selectedData.DataPoint.Items.First().Name</li>
            <li class="list-group-item">Start Date: @selectedData.DataPoint.Items.First().StartDate.ToShortDateString()</li>
            <li class="list-group-item">End Date: @selectedData.DataPoint.Items.First().EndDate.ToShortDateString()</li>
            <li class="list-group-item">Team: @selectedData.DataPoint.Items.First().Team.Name</li>
            <li class="list-group-item">Progress: @selectedData.DataPoint.Items.First().Progress%</li>
            <li class="list-group-item">Task Time Progress: @selectedData.DataPoint.Items.First().AutoProgress%</li>
            <li class="list-group-item">User Progress Difference: @CompareUserProgress(selectedData.DataPoint.Items.First(), selectedData.DataPoint.Items.First().Progress)</li>
        </ul>
    </div>

}
else if (selectedData != null)
{
    <div class="alert alert-info">
        <h3>You clicked the chart but not a data point</h3>
    </div>
}

<h3> Add a new task: </h3>

<form>
    <div class="form-group">
        <label for="taskName">Task Name:</label>
        <input class="form-control" type="text" id="taskName" @bind="newTask.Name" />
    </div>

    <div class="form-group">
        <label for="startDate">Start Date:</label>
        <input class="form-control" type="date" id="startDate" @bind="newTask.StartDate" />
    </div>

    <div class="form-group">
        <label for="endDate">End Date:</label>
        <input class="form-control" type="date" id="endDate" @bind="newTask.EndDate" />
    </div>

    <div class="form-group">
        <label for="comments">Comments:</label>
        <input class="form-control" id="comments" @bind="newTask.Comments">
    </div>

    <div class="form-group">
        <label for="taskTeam">Task Team:</label>
        <select class="form-control" id="taskTeam" @bind="selectedTeamName">
            @foreach (var team in teams)
            {
                <option value="@team.Name">@team.Name</option>
            }
        </select>

    </div>

    <br>

    <button class="btn btn-primary" type="button" @onclick="AddTask">Add Task</button>
</form>


@if (!string.IsNullOrWhiteSpace(errorMessage))
{
    <div class="alert alert-danger mt-2">@errorMessage</div>
}

@code {
    private string errorMessage = "";
    private ApexChart<GanttData> chart;
    private GanttData newTask = new GanttData();
    private List<GanttData> project;
    private List<ProjectTeam> teams;
    private ApexChartOptions<GanttData> options;
    private SelectedData<GanttData> selectedData;
    private bool showEditTaskNameInput = false;
    private bool showEditTaskTimeInput = false;
    private string newTaskName;
    private DateTime newTaskStartTime = DateTime.Today;
    private DateTime newTaskEndTime = DateTime.Today.AddDays(1);
    private string selectedTeamName;
    private int newProgress = 0;
    private List<int> progressOptions = new List<int> { 0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80,
85, 90, 95, 100 };
    private GanttData selectedTaskForProgress;
    private bool showEditProgressInput = false;
    private bool showEditCommentsInput = false;
    private bool showEditCommentsModal = false;
    private string editedComments;
    private List<object> boxedValues = new List<object>();


    protected override async Task OnInitializedAsync()
    {
        project = SampleData.GetProject();
        teams = SampleData.GetTeams();
        var colors = teams.Select(team => team.Color).ToList();
        options = new ApexChartOptions<GanttData>
            {
                PlotOptions = new PlotOptions
                {
                    Bar = new PlotOptionsBar
                    {
                        Horizontal = true,
                        RangeBarGroupRows = true,
                    }
                },
                Tooltip = new ApexCharts.Tooltip
                {
                    X = new TooltipX
                    {
                        Format = "dd MMM yyyy",
                    }
                },
                Colors = colors
            };
        options.Legend = new Legend { Position = LegendPosition.Bottom, FontSize ="14px", HorizontalAlign = Align.Center};            
    }

   private async Task AddXAxisAnnotation()
    {
        var point = new AnnotationsXAxis
            {
                X = DateTime.Now.Date.AddDays(1),
                StrokeDashArray = 0,
                BorderWidth = 3,
                
                Label = new Label
                {
                    Text = "X Axis Annotation"
                }
            };

        await chart.AddXAxisAnnotationAsync(point, false);
    }

    private async Task AddTask()
    {
        if (!newTask.Name.IsTaskNameValid())
        {
            errorMessage = "Task name is required.";
            return;
        }

        if (!newTask.StartDate.IsEndDateGreaterThanStartDate(newTask.EndDate))
        {
            errorMessage = "End date must be greater than start date.";
            return;
        }
        //boxing days demonstration
        boxedValues.Add(newTask.StartDate);
        boxedValues.Add(newTask.EndDate);

        Console.WriteLine("Added Start Date to boxedValues: " + newTask.StartDate);
        Console.WriteLine("Added End Date to boxedValues: " + newTask.EndDate);

        errorMessage = "";
        var selectedTeam = teams.FirstOrDefault(t => t.Name == selectedTeamName);

        if (selectedTeam != null)
        {
            var newTaskData = new GanttData(
            newTask.Name,
            newTask.StartDate,
            newTask.EndDate,
            selectedTeam,
            0,
            newTask.Comments
            );
            newTaskData.AutoProgress = (int)CalculateAutoProgress(newTaskData);
            project.Add(newTaskData);
            await chart.UpdateSeriesAsync();
            StateHasChanged();
            ShowTaskDates();
        }
        else
        {
            // Handle the case where no team with the selected name is found
            errorMessage = "Selected team not found.";
        }
    }

    private void ShowTaskDates()
    {

        if (boxedValues.Count >= 2)
        {
            DateTime startDate = (DateTime)boxedValues[0];
            DateTime endDate = (DateTime)boxedValues[1];

            Console.WriteLine("Start Date: " + startDate);
            Console.WriteLine("End Date: " + endDate);
        }
    }
    private double CalculateAutoProgress(GanttData task)
    {
        var now = DateTime.Now;
        double totalDays = (task.EndDate - task.StartDate).TotalDays;
        double dayProgress;

        if (task.StartDate <= now && now <= task.EndDate)
        {
            double daysPassed = (now - task.StartDate).TotalDays;
            dayProgress = (daysPassed / totalDays) * 100;
        }
        else if (now > task.EndDate)
        {
            dayProgress = 100;
        }
        else
        {
            dayProgress = 0;
        }

        return dayProgress;
    }
    private void OnClick(SelectedData<GanttData> data)
    {
        selectedData = data;
    }
    private async Task RemoveTask()
    {
        if (selectedData != null && selectedData.DataPoint != null)
        {
            if (selectedData.DataPoint.X is string selectedTaskName)
            {
                // Use LINQ to create a new list of tasks excluding the one with the matching name
                project = project.Where(task => task.Name != selectedTaskName).ToList(); // LINQ EXPRESSION
            }
            selectedData = null; // Reset selected data after removal
        }
        await chart.UpdateSeriesAsync();
        StateHasChanged();
    }
    private async Task AddProgress()
    {
        if (selectedData != null && selectedData.DataPoint != null)
        {
            if (selectedData.DataPoint.X is string selectedTaskName)
            {
                GanttData taskToUpdate = project.FirstOrDefault(task => task.Name == selectedTaskName);
                if (taskToUpdate != null)
                {
                    showEditProgressInput = !showEditProgressInput;
                    selectedTaskForProgress = taskToUpdate;
                }
            }
        }
    }

    private async Task UpdateProgress(int progressValue)
    {
        if (selectedTaskForProgress != null)
        {
            selectedTaskForProgress.Progress = progressValue;

            if (progressValue == 100)
            {
                selectedTaskForProgress.PointColor = "#CCCCCC";
            }
            else
            {
                selectedTaskForProgress.PointColor = selectedTaskForProgress.Team.Color;
            }

            showEditProgressInput = false;
            selectedTaskForProgress = null;

            await chart.UpdateSeriesAsync();
            StateHasChanged();
        }
    }


    private async Task EditTaskName(string newTaskName) // Strictly to edit the name and refresh
    {
        if (selectedData != null && selectedData.DataPoint != null &&
        selectedData.DataPoint.X is string selectedTaskName)
        {
            GanttData taskToUpdate = project.FirstOrDefault(task => task.Name == selectedTaskName);
            if (taskToUpdate != null)
            {
                taskToUpdate.Name = newTaskName;
            }
        }

        await chart.UpdateSeriesAsync();
        StateHasChanged();
    }

    private async Task UpdateTaskName() // To do checks wether the input is valid, if yes update the name
    {
        if (!string.IsNullOrWhiteSpace(newTaskName))
        {
            if (!project.Any(task => task.Name == newTaskName))
            {
                await EditTaskName(newTaskName);
                showEditTaskNameInput = false;
                newTaskName = string.Empty;
            }
            else
            {
                // Handle case where the name is already in use
            }
        }

        else
        {
            // handle case where name is whiteSpace
        }
    }

    private void ToggleEditTaskName()
    {
        newTaskName = "";
        showEditTaskTimeInput = false;
        showEditTaskNameInput = !showEditTaskNameInput;
        showEditCommentsInput = false;
    }

    private async Task EditTaskTime(DateTime newStartDate, DateTime newEndDate)
    {
        if (selectedData != null && selectedData.DataPoint != null)
        {
            if (selectedData.DataPoint.X is string selectedTaskName)
            {
                // Find the task in the project list with the matching name and update its StartDate and EndDate properties
                GanttData taskToUpdate = project.FirstOrDefault(task => task.Name == selectedTaskName);
                if (taskToUpdate != null)
                {
                    taskToUpdate.StartDate = newStartDate;
                    taskToUpdate.EndDate = newEndDate;
                }
            }
            selectedData = null; // Reset selected data after modification
        }
        await chart.UpdateSeriesAsync();
        StateHasChanged();
    }


    private async Task UpdateTaskTime()
    {
        if (newTaskStartTime < newTaskEndTime) // Add a check to ensure the start date is before the end date
        {
            await EditTaskTime(newTaskStartTime, newTaskEndTime);
            showEditTaskTimeInput = false;
        }
        else
        {
            // Handle case where the start date is not before the end date
            // You may want to display a message or take appropriate action
        }
    }


    private void ToggleEditTaskTime()
    {
        newTaskStartTime = DateTime.Today;
        newTaskEndTime = DateTime.Today.AddDays(1);
        showEditTaskNameInput = false;
        showEditTaskTimeInput = !showEditTaskTimeInput;
        showEditCommentsInput = false;
    }

    private void CloseEditCommentsModal()
    {
        showEditCommentsModal = false;
        editedComments = ""; // Clear the edited comments
    }

    private async Task UpdateComments()
    {
        if (selectedData != null && selectedData.DataPoint != null)
        {
            if (selectedData.DataPoint.X is string selectedTaskName)
            {
                GanttData taskToUpdate = project.FirstOrDefault(task => task.Name == selectedTaskName);
                if (taskToUpdate != null)
                {
                    taskToUpdate.Comments = editedComments;
                }
            }

            CloseEditCommentsModal();
            await chart.UpdateSeriesAsync();
            StateHasChanged();
        }
    }

    private void ToggleEditComments()
    {
        editedComments = selectedData.DataPoint.Items.First().Comments; // Initialize the input field with existing comments
        showEditTaskNameInput = false;
        showEditTaskTimeInput = false;
        showEditCommentsInput = false;
        showEditCommentsModal = true;
    }
    private string CompareUserProgress(GanttData task, int userProgress)
    {
        double taskTimeProgress = task.AutoProgress;
        double userDaysAheadOrBehind = (taskTimeProgress - userProgress) * (task.EndDate - task.StartDate).TotalDays / 100.0;

        if (userProgress == 100)
        {
            return "Task completed.";
        }
        else if (userDaysAheadOrBehind > 0)
        {
            return $"User is {userDaysAheadOrBehind:N1} days behind.";
        }
        else if (userDaysAheadOrBehind < 0)
        {
            return $"User is {Math.Abs(userDaysAheadOrBehind):N1} days ahead.";
        }
        else
        {
            return "User is on track.";
        }
    }
    

}