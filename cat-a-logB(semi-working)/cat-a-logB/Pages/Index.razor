@page "/";
@using cat_a_logB;
@using ApexCharts;

<PageTitle>Gantt Chart</PageTitle>

<DemoContainer>

    @if (project == null)
    {
        <div class="text-center text-muted" style="min-height: 300px">
            <h3>Loading chart<span class="animated-dots"></span></h3>
        </div>
    }
    else
    {
        <ApexChart OnClick=OnClick @ref=chart TItem="GanttData" Title="Projects" Options="options"
            XAxisType="XAxisType.Datetime">
            <ApexRangeSeries TItem="GanttData" Items="project" XValue="@(e => e.Name)"
                YMinValue="@(e => e.StartDate.ToUnixTimeMilliseconds())"
                YMaxValue="@(e => e.EndDate.ToUnixTimeMilliseconds())" />
        </ApexChart>
    }

</DemoContainer>

@if (selectedData != null && selectedData.DataPoint != null)
{
    <Alert>
        <h3>Edit: @selectedData.DataPoint.X</h3>
    </Alert>
    <form>
        <!-- Buttons for editing tasks -->
        <button type="button" @onclick="RemoveTask">Remove Task</button>
        <button type="button" @onclick="ToggleEditTaskName">Edit Task Name</button>
        <button type="button" @onclick="ToggleEditTaskTime">Edit Task Time</button>
    </form>
    @if (showEditTaskNameInput)
    {
        <form>
            <label for="newTaskName">New Task Name:</label>
            <input type="text" id="newTaskName" @bind="newTaskName" />
            <button type="button" @onclick="UpdateTaskName">Update Task Name</button>
        </form>
    }
    @if (showEditTaskTimeInput)
    {
        <form>
            <label for="startDate">Start Date:</label>
            <input type="date" id="newTaskStartTime" @bind="newTaskStartTime" />
            <label for="endDate">End Date:</label>
            <input type="date" id="newTaskEndTime" @bind="newTaskEndTime" />
            <button type="button" @onclick="UpdateTaskTime">Update Task Time</button>
        </form>
    }
}
else if (selectedData != null)
{
    <Alert>
        <h3>You clicked the chart but not a data point</h3>
    </Alert>
}
<br>


<h3> Add a new task: </h3>

<form>
    <div class="form-group">
        <label for="taskName">Task Name:</label>
        <input class="form-control" type="text" id="taskName" @bind="newTask.Name" />
    </div>

    <div class="form-group">
        <label for="startDate">Start Date:</label>
        <input class="form-control" type="date" id="startDate" @bind="newTask.StartDate" />
    </div>

    <div class="form-group">
        <label for="endDate">End Date:</label>
        <input class="form-control" type="date" id="endDate" @bind="newTask.EndDate" />
    </div>

    <button class="btn btn-primary" type="button" @onclick="AddTask">Add Task</button>
</form>

@if (!string.IsNullOrWhiteSpace(errorMessage))
{
    <div class="alert alert-danger mt-2">@errorMessage</div>
}

@code {
    private string errorMessage = "";
    private ApexChart<GanttData> chart;
    private GanttData newTask = new GanttData();
    private List<GanttData> project;
    private ApexChartOptions<GanttData> options;
    private SelectedData<GanttData> selectedData;
    private bool showEditTaskNameInput = false;
    private bool showEditTaskTimeInput = false;
    private string newTaskName;
    private DateTime newTaskStartTime = DateTime.Today;
    private DateTime newTaskEndTime = DateTime.Today.AddDays(1);

    protected override async Task OnInitializedAsync()
    {
        options = new ApexChartOptions<GanttData>
        {
            PlotOptions = new PlotOptions
            {
                Bar = new PlotOptionsBar
                {
                    Horizontal = true
                }
            },
            Tooltip = new ApexCharts.Tooltip
            {
                X = new TooltipX
                {
                    Format = "dd MMM yyyy HH:mm",
                }
            }
        };
        project = SampleData.GetProject();
    }

    private async Task AddTask()
    {
        if (string.IsNullOrWhiteSpace(newTask.Name))
        {
            errorMessage = "Task name is required.";
            return;
        }

        if (newTask.StartDate >= newTask.EndDate)
        {
            errorMessage = "End date must be greater than start date.";
            return;
        }

        errorMessage = "";

        var newTaskData = new GanttData
        {
            Name = newTask.Name,
            StartDate = newTask.StartDate,
            EndDate = newTask.EndDate
        };

        project.Add(newTaskData);

        await chart.UpdateSeriesAsync();
        StateHasChanged();
    }

    private void OnClick(SelectedData<GanttData> data)
    {
        selectedData = data;
    }
    private async Task RemoveTask()
    {
        if (selectedData != null && selectedData.DataPoint != null)
        {
            if (selectedData.DataPoint.X is string selectedTaskName)
            {
                // Use LINQ to create a new list of tasks excluding the one with the matching name
                project = project.Where(task => task.Name != selectedTaskName).ToList(); // LINQ EXPRESSION
            }
            selectedData = null; // Reset selected data after removal
        }
        await chart.UpdateSeriesAsync();
        StateHasChanged();
    }




    private async Task EditTaskName(string newTaskName) // Strictly to edit the name and refresh
    {
        if (selectedData != null && selectedData.DataPoint != null &&
        selectedData.DataPoint.X is string selectedTaskName)
        {
            GanttData taskToUpdate = project.FirstOrDefault(task => task.Name == selectedTaskName);
            if (taskToUpdate != null)
            {
                taskToUpdate.Name = newTaskName;
            }
        }

        await chart.UpdateSeriesAsync();
        StateHasChanged();
    }

    private async Task UpdateTaskName() // To do checks wether the input is valid, if yes update the name
    {
        if (!string.IsNullOrWhiteSpace(newTaskName))
        {
            if (!project.Any(task => task.Name == newTaskName))
            {
                await EditTaskName(newTaskName);
                showEditTaskNameInput = false;
                newTaskName = string.Empty;
            }
            else
            {
                // Handle case where the name is already in use
            }
        }

        else
        {
            // handle case where name is whiteSpace
        }
    }

    private void ToggleEditTaskName()
    {
        newTaskName = "";
        showEditTaskTimeInput = false;
        showEditTaskNameInput = !showEditTaskNameInput;
    }

    private async Task EditTaskTime(DateTime newStartDate, DateTime newEndDate)
    {
        if (selectedData != null && selectedData.DataPoint != null)
        {
            if (selectedData.DataPoint.X is string selectedTaskName)
            {
                // Find the task in the project list with the matching name and update its StartDate and EndDate properties
                GanttData taskToUpdate = project.FirstOrDefault(task => task.Name == selectedTaskName);
                if (taskToUpdate != null)
                {
                    taskToUpdate.StartDate = newStartDate;
                    taskToUpdate.EndDate = newEndDate;
                }
            }
            selectedData = null; // Reset selected data after modification
        }
        await chart.UpdateSeriesAsync();
        StateHasChanged();
    }


    private async Task UpdateTaskTime()
    {
        if (newTaskStartTime < newTaskEndTime) // Add a check to ensure the start date is before the end date
        {
            await EditTaskTime(newTaskStartTime, newTaskEndTime);
            showEditTaskTimeInput = false;
        }
        else
        {
            // Handle case where the start date is not before the end date
            // You may want to display a message or take appropriate action
        }
    }


    private void ToggleEditTaskTime()
    {
        newTaskStartTime = DateTime.Today;
        newTaskEndTime = DateTime.Today.AddDays(1);
        showEditTaskNameInput = false;
        showEditTaskTimeInput = !showEditTaskTimeInput;
    }

}