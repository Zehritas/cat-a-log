<div class="modal fade show" style="display: block;" tabindex="-1" role="dialog" id="editCommentsModal">
   <div class="modal-dialog" role="document">
      <div class="modal-content">
         <div class="modal-header">
            <h5 class="modal-title">@selectedData.DataPoint.Items.First().Name Comments </h5>
            <button type="button" class="close" @onclick="OnClose">
               <span aria-hidden="true">Ã—</span>
            </button>
         </div>
         <div class="modal-body">
            <div class="form-group">
               <label for="newComments">Comments:</label>
               <textarea class="form-control" id="newComments" @bind="editedComments"></textarea>
            </div>
         </div>
         <div class="modal-footer">
            <button type="button" class="btn btn-secondary" @onclick="OnClose">Close</button>
            <button type="button" class="btn btn-success" @onclick="UpdateComments">Save Changes</button>
         </div>
      </div>
   </div>
</div>
<div class="modal-backdrop fade show"></div>

@code {
   [Parameter] public List<GanttData> project { get; set; }
   [Parameter] public ApexChart<GanttData> chart { get; set; }
   [Parameter] public SelectedData<GanttData> selectedData { get; set; }
   [Parameter] public EventCallback OnClose { get; set; }

   private string editedComments;

   protected override void OnInitialized()
   {
      if (selectedData != null && selectedData.DataPoint != null && selectedData.DataPoint.Items.Any())
      {
         editedComments = selectedData.DataPoint.Items.First().Comments;
      }
   }
   private async Task UpdateComments()
   {
      if (selectedData != null && selectedData.DataPoint != null)
      {
         if (selectedData.DataPoint.X is string selectedTaskName)
         {
            GanttData taskToUpdate = project.FirstOrDefault(task => task.Name == selectedTaskName);
            if (taskToUpdate != null)
            {
               taskToUpdate.Comments = editedComments;
            }
         }

         OnClose.InvokeAsync();
         await chart.UpdateSeriesAsync();
         StateHasChanged();
      }
   }

}
