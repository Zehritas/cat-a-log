@page "/";
@using cat_a_logB.Data
@using cat_a_logB;
@using ApexCharts;
@using Microsoft.AspNetCore.Components;
@using Service;
@inject cat_a_logB.Pages.SampleData SampleData
@inject cat_a_logB.Data.TaskManager TaskManager
@inject cat_a_logB.Data.CalculationData CalculationData
@inject cat_a_logB.Data.MilestoneManager MilestoneManager
@inject Service.ITaskDataService TaskDataService
@inject Service.IDependencyService DependencyService
@inject Service.IMilestoneService MilestoneService
@inject Service.IProjectTeamService ProjectTeamService


<PageTitle>Gantt Chart | Cat-a-log</PageTitle>

@* <button type="button" class="btn btn-primary" @onclick=ShowMilestones>Show Milestones</button> *@

<DemoContainer>
    <ApexChart @ref=MileChart TItem="ProjectMilestone" Title="@title" Height="120" Options=options1 Debug
        OnClick=HandleMilestoneClick>


        <ApexPointTooltip>
            <div class="m-2" style="width: 300px; max-height: 100px; font-size: 12px;">
                @if (context != null)
                {
                    var dataPoint = (ApexCharts.DataPoint<ProjectMilestone>)context.DataPoint;

                    var milestone = dataPoint.Items.FirstOrDefault();
                    if (milestone != null)
                    {
                        <h4>@milestone.Name</h4>
                        <span>Tasks:</span>
                        <ul>
                            @foreach (var task in milestone.Tasks)
                            {
                                <li>
                                    <span style="margin-right: 8px;">@task.Name</span>
                                    @if (task.Progress == 100)
                                    {
                                        <span style="color: green;">(Complete)</span>
                                    }


                                </li>

                            }
                        </ul>

                    }
                }
                else
                {
                    <p>Context is null.</p>
                }

            </div>
        </ApexPointTooltip>


        <ChildContent>

            <ApexPointSeries TItem="ProjectMilestone" Items="milestones" Name="Milestones" SeriesType="SeriesType.Line"
                XValue="@(e => e.Name)" YValue="@(e => 0)" PointColor="@(e => e.Color)">


            </ApexPointSeries>

        </ChildContent>

    </ApexChart>

</DemoContainer>





<DemoContainer>

    @if (project == null)
    {
        <div class="text-center text-muted" style="min-height: 300px">
            <h3>Loading chart<span class="animated-dots"></span></h3>
        </div>
    }
    else
    {

        <ApexChart OnClick=OnClick @ref=chart TItem="TaskData" Title="Project Gantt chart" Options="options"
            XAxisType="XAxisType.Datetime">


            <ApexPointTooltip>

                <div class="m-3">
                    @{
                        var point = (ListPoint<TaskData>)context.DataPoint;
                        var task = point.Items.First();

                        <h4>@point.X</h4>
                        <span>Deadline: @point.Items.First().EndDate.ToShortDateString()</span>
                        <br>
                        <span>Team: @point.Items.First().Team.Name</span>
                        <br>
                        <span>@CalculationData.CompareUserProgress(point.Items.First())</span>
                        <br>
                        @if (task.Progress == 0)
                        {
                            <span style="color: red;">Task has zero progress.</span>
                        }
                        else if (task.Progress >= task.AutoProgress)
                        {
                            <span style="color: green;">@CalculationData.CheckEstimatedProgress(point.Items.First())</span>
                        }
                        else
                        {
                            <span style="color: red;">@CalculationData.CheckEstimatedProgress(point.Items.First())</span>
                        }
                    }
                </div>

            </ApexPointTooltip>

            <ChildContent>
                @foreach (var team in teams)
                {
                    <ApexRangeSeries TItem="TaskData" Items="project.Where(task => task.Team == team)" Name="@team.Name"
                        XValue="@(e => e.Name)" YMinValue="@(e => e.StartDate.ToUnixTimeMilliseconds())"
                        YMaxValue="@(e => e.EndDate.ToUnixTimeMilliseconds())" PointColor="e => e.PointColor"
                        OrderByDescending="e => e.Items.First().Team.Name" />
                }

            </ChildContent>


        </ApexChart>
    }

</DemoContainer>



@if (selectedData != null && selectedData.DataPoint != null)
{
    <div class="alert alert-info">
        <h3>Edit:@selectedData.DataPoint.Items.First().Name</h3>
    </div>

    <form>
        <!-- Buttons for editing tasks -->

        <button type="button" class="btn btn-primary" @onclick="RemoveTask">Remove Task</button>
        <button type="button" class="btn btn-primary" @onclick="ToggleEditTaskName">Edit Task Name</button>
        <button type="button" class="btn btn-primary" @onclick="ToggleEditTaskTime">Edit Task Time</button>
        <button type="button" class="btn btn-primary" @onclick="ToggleEditTaskComments">Comments</button>
        <button type="button" class="btn btn-primary" @onclick="ToggleEditTaskProgress">Update Progress</button>
        <button type="button" class="btn btn-primary" @onclick="ToggleEditTaskDependencies">Add Dependency</button>
    </form>
    @if (showEditTaskNameInput)
    {
        <EditTaskNameInput selectedData="selectedData" project="project" chart="chart" OnClose="ToggleEditTaskName" />
    }
    @if (showEditTaskTimeInput)
    {
        <EditTaskTimeInput selectedData="selectedData" project="project" chart="chart" OnClose="ToggleEditTaskTime" />
    }
    @if (showEditTaskProgressInput)
    {
        <EditTaskProgressInput selectedData="selectedData" project="project" chart="chart" mileChart="MileChart"
            milestones="milestones" OnClose="ToggleEditTaskProgress" />
    }
    @if (showEditTaskCommentsModal)
    {
        <EditTaskCommentsModal selectedData="selectedData" project="project" chart="chart" OnClose="ToggleEditTaskComments" />
    }

    @if (showEditTaskDependenciesModal)
    {
        <AddRemoveDependency selectedData="selectedData" project="project" chart="chart" OnClose="ToggleEditTaskDependencies" />
    }
    <div class="mt-4">
        <h4>Task Information:</h4>
        <ul class="list-group">
            <li class="list-group-item">Task Name: @selectedData.DataPoint.Items.First().Name</li>
            <li class="list-group-item">Start Date: @selectedData.DataPoint.Items.First().StartDate.ToShortDateString()</li>
            <li class="list-group-item">End Date: @selectedData.DataPoint.Items.First().EndDate.ToShortDateString()</li>
            <li class="list-group-item">Team: @selectedData.DataPoint.Items.First().Team.Name</li>
            <li class="list-group-item">Progress: @selectedData.DataPoint.Items.First().Progress%</li>
            <li class="list-group-item">Task Time Progress: @selectedData.DataPoint.Items.First().AutoProgress%</li>
            <li class="list-group-item">User Progress Difference: @CalculationData.CompareUserProgress(selectedData.DataPoint.Items.First())
            </li>
            <div class="mt-4">
                <h4>Dependencies:</h4>
                <ul class="list-group">
                    @foreach (var dependency in selectedData.DataPoint.Items.First().Dependencies)
                    {
                        <li class="list-group-item">
                            Task: @TaskDataService.GetTaskName(dependency.SuccessorTaskId),
                            Type: @dependency.Type
                        </li>
                    }
                </ul>
            </div>
        </ul>
    </div>

}
else if (selectedData != null)
{
    <div class="alert alert-info">
        <h3>You clicked the chart but not a data point</h3>
    </div>
}

<h3> Add a new task: </h3>

<form>
    <div class="form-group">
        <label for="taskName">Task Name:</label>
        <input class="form-control" type="text" id="taskName" @bind="newTask.Name" />
    </div>

    <div class="form-group">
        <label for="startDate">Start Date:</label>
        <input class="form-control" type="date" id="startDate" @bind="newTask.StartDate" />
    </div>

    <div class="form-group">
        <label for="endDate">End Date:</label>
        <input class="form-control" type="date" id="endDate" @bind="newTask.EndDate" />
    </div>

    <div class="form-group">
        <label for="comments">Comments:</label>
        <input class="form-control" id="comments" @bind="newTask.Comments">
    </div>

    <div class="form-group">
        <label for="taskTeam">Task Team:</label>
        <select class="form-control" id="taskTeam" @bind="selectedTeamName">
            <option value="">-</option>
            @foreach (var team in teams)
            {
                <option value="@team.Name">@team.Name</option>
            }
        </select>

    </div>

    <br>
    <button class="btn btn-primary" type="button" @onclick="AddTask">Add Task</button>
</form>


@if (!string.IsNullOrWhiteSpace(errorMessage))
{
    <div class="alert alert-danger mt-2">@errorMessage</div>
}


@code {
    private string errorMessage = "";
    private ApexChart<TaskData> chart;
    private TaskData newTask = new TaskData();
    private List<TaskData> project;
    private List<TaskData> sortedTasks;
    private List<ProjectTeam> teams;
    private ApexChartOptions<TaskData> options;
    private SelectedData<TaskData> selectedData;
    private string newTaskName;
    private DateTime newTaskStartTime = DateTime.Today;
    private DateTime newTaskEndTime = DateTime.Today.AddDays(1);
    private string selectedTeamName;
    private TaskData selectedTaskForProgress;
    private bool showEditTaskNameInput = false;
    private bool showEditTaskTimeInput = false;
    private bool showEditTaskProgressInput = false;
    private bool showEditTaskCommentsModal = false;
    private bool showEditTaskDependenciesModal = false;
    private DependencyType selectedDependencyType = DependencyType.FS; //default is FS
    private string selectedSuccessorTaskName;
    private int selectedSuccessorTask = 0;
    private List<object> boxedValues = new List<object>();
    private ApexChart<ProjectMilestone> MileChart;
    private List<ProjectMilestone> milestones;
    private List<Member> members;
    private string title = "Milestone List";
    private List<double> lineData;
    private ApexChartOptions<ProjectMilestone> options1 { get; set; } = new();
    private ProjectMilestone clickedMilestone;
    private List<ProjectMilestone> displayedMilestones = new List<ProjectMilestone>();


    private bool showCreateNewTask = false;



    protected override async Task OnInitializedAsync()
    {
        project = TaskDataService.GetAllTasks();
        teams = ProjectTeamService.GetAllTeams();
        milestones = MilestoneService.GetAllMilestones();
        members = ProjectTeamService.GetAllMembers();
        foreach (var team in teams)
        {
            team.LoadTeamMembers(members);
        }

        sortedTasks = project;
        var colors = teams.Select(team => team.Color).ToList();
        lineData = milestones.Select(_ => 100.0).ToList();

        options1.Yaxis = new List<YAxis>();
        options1.Yaxis.Add(new YAxis
            {
                DecimalsInFloat = 0,
                TickAmount = 1,

                Labels = new YAxisLabels
                {
                    Style = new AxisLabelStyle
                    {
                        FontSize = "5px",
                        Colors = new Color("white")
                    }
                }
            });


        options = new ApexChartOptions<TaskData>
            {
                PlotOptions = new PlotOptions
                {
                    Bar = new PlotOptionsBar
                    {
                        Horizontal = true,
                        RangeBarGroupRows = true,
                    }
                },
                Tooltip = new ApexCharts.Tooltip
                {
                    X = new TooltipX
                    {
                        Format = "dd MMM yyyy",
                    }
                },
                Colors = colors,

            };

        options.Legend = new Legend { Position = LegendPosition.Bottom, FontSize = "14px", HorizontalAlign = Align.Center };

    }

    private async Task RefreshData()
    {
        project = TaskDataService.GetAllTasks();
        teams = ProjectTeamService.GetAllTeams();
        milestones = MilestoneService.GetAllMilestones();

        StateHasChanged();
    }

    private void OnClick(SelectedData<TaskData> data)
    {
        selectedData = data;
    }

    private Task HandleMilestoneClick(SelectedData<ProjectMilestone> data)
    {
        return ShowMilestone(data);
    }

    private async Task ShowMilestone(SelectedData<ProjectMilestone> data)
    {
        await MilestoneManager.ShowMilestone(chart, data, clickedMilestone, displayedMilestones);
    }

    private async Task AddTask()
    {
        await TaskManager.AddTask(project, chart, newTask, teams, selectedTeamName);
    }

    private async Task RemoveTask()
    {
        await TaskManager.RemoveTask(selectedData, project, chart);
    }

    #region ToggleFunctions
    private void ToggleEditTaskName()
    {
        newTaskName = "";
        showEditTaskNameInput = !showEditTaskNameInput;
    }

    private void ToggleEditTaskProgress()
    {
        showEditTaskProgressInput = !showEditTaskProgressInput;
    }


    private void ToggleEditTaskDependencies()
    {
        showEditTaskDependenciesModal = !showEditTaskDependenciesModal;
        selectedSuccessorTaskName = null;

    }

    private void ToggleEditTaskTime()
    {
        newTaskStartTime = DateTime.Today;
        newTaskEndTime = DateTime.Today.AddDays(1);
        showEditTaskTimeInput = !showEditTaskTimeInput;
    }

    private void ToggleEditTaskComments()
    {
        showEditTaskCommentsModal = !showEditTaskCommentsModal;
    }

    private void ToggleCreateNewTask()
    {
        showCreateNewTask = !showCreateNewTask;
    }
    #endregion

 }