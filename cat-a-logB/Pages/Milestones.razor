@page "/Milestones"
@using cat_a_logB.Data
@inject cat_a_logB.Pages.SampleData SampleData
@inject Service.ITaskDataService TaskDataService
@inject Service.IMilestoneService MilestoneService

<PageTitle>Milestones | Cat-a-log</PageTitle>

<div class="container" style="max-width: 700px;">
    <div class="row">
        <div class="col-12 mb-4">
            <style>
                .modern-heading {
                    text-align: center;
                    font-size: 1.8rem;
                    font-weight: 700;
                    color: #333;
                    text-transform: uppercase;
                    letter-spacing: 2px;
                    margin-bottom: 1.5rem;
                    border-bottom: 2px solid #193a5e;
                    padding-bottom: 0.5rem;
                    font-family: 'Roboto', sans-serif;
                    /* Use your preferred font here */
                }

                button {
                    font-family: 'Roboto', sans-serif;
                }

                h4 {
                    font-family: 'Roboto', sans-serif;
                }
            </style>

            <h3 class="mb-4 modern-heading">Current Milestones</h3>
            @if (milestones != null && milestones.Any())
            {
                <div class="list-group">
                    @foreach (var milestone in milestones)
                    {
                        <div class="list-group-item d-flex justify-content-between align-items-center">
                            <style>
                                .milestone-btn-@milestone.Id {
                                    background-color: white;
                                    transition: background-color 0.3s;
                                    border: 1px solid var(--accent-color-2);
                                    color: #1f1f1f;
                                }

                                .milestone-btn-@milestone.Id:hover {
                                    background-color: var(--accent-color-2);
                                    color: white;
                                }
                            </style>
                            <button class="primary-button milestone-btn-@milestone.Id"
                                @onclick="() => ToggleMilestoneSelection(milestone)">
                                <span class="ml-2 milestone-name">@milestone.Name</span>
                            </button>
                            <span class="text-secondary-bold">Target date: @milestone.TargetDate.ToShortDateString()</span>
                        </div>
                    }
                </div>
            }
            else
            {
                <p>No Milestones found.</p>
            }
        </div>
    </div>

    <div class="row">
        <div class="col-12 mb-4">
            <div class="list-group">
                <button class="primary-button" @onclick="ToggleCreateForm">Create New Milestone</button>
            </div>
        </div>
    </div>

    @if (isFormVisible)
    {
        <div class="row">
            <div class="col-12 mb-4">
                <div class="card">
                    <div class="card-body">
                        <form>
                            <div class="form-group">
                                <label for="milestoneName">Milestone Name:</label>
                                <input class="form-control" type="text" id="milestoneName" @bind="milestoneName" />
                            </div>

                            <div class="form-group">
                                <label>Select tasks:</label>
                                <div class="row">
                                    @foreach (var task in tasks)
                                    {
                                        <div class="col-md-4">
                                            <label class="checkbox-inline">
                                                <input type="checkbox" @onclick="() => ToggleTaskSelection(task)"
                                                    checked="@selectedTasks.Contains(task)" />
                                                @task.Name
                                            </label>
                                        </div>
                                    }
                                </div>
                            </div>

                            <div class="form-group">
                                <label>Target completion date:</label>
                                <input class="form-control" type="date" id="targetDate" @bind="milestoneDate" />
                            </div>

                            <br />
                            <button class="primary-button" type="button" @onclick="CreateMilestone">Create
                                Milestone</button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    }

    @if (selectedMilestone != null)
    {
        @if (selectedMilestone.Tasks != null && selectedMilestone.Tasks.Any())
        {
            <style>
                .list-group-item:hover {
                    background-color: #f0f0f0;
                    /* Change the background color on hover */
                }
            </style>
            <h4 class="mb-4 font-weight-bold text-center">Tasks for milestone @selectedMilestone.Name</h4>
            <div class="list-group">
                @foreach (var task in selectedMilestone.Tasks)
                {
                    <div class="list-group-item">
                        <div class="d-flex w-100 justify-content-between">
                            <h5 class="mb-1">@task.Name</h5>
                            <!-- Add more information if needed -->
                            <small>Due: @task.EndDate.ToString("yyyy-MM-dd")</small>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <h4 class="mb-4 font-weight-bold text-center">@selectedMilestone.Name has no tasks.</h4>
        }
    }
    else
    {
        <h4 class="mb-4 font-weight-bold text-center">Click on a milestone name to see its information!</h4>
    }

    @if (!string.IsNullOrWhiteSpace(errorMessage))
    {
        <div class="alert alert-danger" role="alert">
            @errorMessage
        </div>
    }
</div>


@code {
    private List<TaskData> tasks;
    private List<ProjectMilestone> milestones;
    private string milestoneName;
    private DateTime milestoneDate = DateTime.Today;
    private List<TaskData> selectedTasks = new List<TaskData>();
    private ProjectMilestone selectedMilestone;
    private ProjectMilestone newMilestone = new ProjectMilestone();
    private string errorMessage = "";
    bool isFormVisible = false;





    protected override void OnInitialized()
    {
        milestones = MilestoneService.GetAllMilestones();
        tasks = TaskDataService.GetAllTasks();
    }

    private async Task RefreshData()
    {
        milestones = MilestoneService.GetAllMilestones();
        tasks = tasks = TaskDataService.GetAllTasks();

        StateHasChanged();
    }

    private void ToggleTaskSelection(TaskData task)
    {
        if (selectedTasks == null)
        {
            selectedTasks = new List<TaskData>();
        }

        if (selectedTasks.Contains(task))
        {
            selectedTasks.Remove(task);
        }
        else
        {
            selectedTasks.Add(task);
        }
    }

    private async void CreateMilestone()
    {

        errorMessage = ""; // Clear any previous error message

        if (string.IsNullOrWhiteSpace(milestoneName))
        {
            errorMessage = "Milestone name is required.";
            return;
        }

        if (milestones.Any(m => m.Name.Equals(milestoneName, StringComparison.OrdinalIgnoreCase)))
        {
            errorMessage = "Milestone name already exists.";
            return;
        }

        if (selectedTasks == null || !selectedTasks.Any())
        {
            errorMessage = "Please select at least one task.";
            return;
        }


        newMilestone = new ProjectMilestone(milestoneName, selectedTasks.ToList(), milestoneDate, "blue");

        MilestoneService.AddMilestone(newMilestone);
        milestones.Add(newMilestone);
        newMilestone = new ProjectMilestone();
        milestoneName = string.Empty;
        selectedTasks.Clear();

        await RefreshData();
        StateHasChanged();

    }

    private void ToggleMilestoneSelection(ProjectMilestone milestone)
    {
        if (selectedMilestone != milestone)
        {
            selectedMilestone = milestone;
            // ProjectTeam.GetTasksForTeam(tasks, milestone);
        }
        else
        {
            selectedMilestone = null;
        }
    }
    void ToggleCreateForm()
    {
        isFormVisible = !isFormVisible;
    }
}