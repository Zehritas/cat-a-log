@page "/teams"
@using cat_a_logB.Data
@using cat_a_logB.Service.Interfaces

@inject cat_a_logB.Pages.SampleData SampleData
@inject ITaskDataService TaskDataService
@inject IDependencyService DependencyService
@inject IMilestoneService MilestoneService
@inject IProjectTeamService ProjectTeamService

<PageTitle>Teams | Cat-a-log</PageTitle>

<div class="container" style="max-width: 700px;">
    <div class="row">
        <div class="col-12 mb-4">
            <style>
                .modern-heading {
                    text-align: center;
                    font-size: 1.8rem;
                    font-weight: 700;
                    color: #333;
                    /* Set your preferred text color */
                    text-transform: uppercase;
                    letter-spacing: 2px;
                    margin-bottom: 1.5rem;
                    border-bottom: 2px solid #193a5e;
                    /* Set your preferred border color */
                    padding-bottom: 0.5rem;
                }

                span {
                    font-family: 'Roboto', sans-serif;
                    /* Use your preferred font here */
                }

                button {
                    font-family: 'Roboto', sans-serif;
                }

                h4 {
                    font-family: 'Roboto', sans-serif;
                }

                label {
                    font-family: 'Roboto', sans-serif;
                }
            </style>

            <h3 class="mb-4 modern-heading">Current Teams</h3>
            @if (teams != null && teams.Any())
            {
                <div class="list-group">
                    @foreach (var team in teams)
                    {
                        <div class="list-group-item d-flex justify-content-between align-items-center">
                            <style>
                                .team-name-btn-@team.Id {
                                    transition: background-color 0.3s;
                                }

                                .team-name-btn-@team.Id:hover {
                                    background-color: @team.Color;
                                    color: white;
                                }
                            </style>
                            <button class="btn btn-outline-primary team-name-btn-@team.Id"
                                @onclick="() => ShowTasksForTeam(team)">
                                <span class="ml-2 team-name">@team.Name</span>
                            </button>
                            <div class="d-flex align-items-center">
                                <button class="btn btn-warning ml-2" @onclick="() => EditTeamMembers(team)">Edit
                                    Members</button>
                                <button class="btn btn-danger" style="margin-left: 8px;"
                                    @onclick="() => ToggleRemoveTeamModal(team)">Remove Team</button>
                            </div>
                        </div>
                    }
                </div>
            }
            else
            {
                <p class="text-center">No teams found.</p>
            }
        </div>
    </div>
</div>

<div class="container" style="max-width: 700px;">
    <div class="row">
        <div class="col-12 mb-4">
            <div class="list-group">
                <button class="btn btn-primary btn-block" @onclick="ToggleCreateForm">Create New Team</button>
            </div>
        </div>
    </div>
</div>

@if (isFormVisible)
{
    <div class="container" style="max-width: 700px;">
        <div class="row">
            <div class="col-12 mb-4">
                <div class="card">
                    <div class="card-body">
                        @* <h3 class="card-title mb-3">New Team:</h3> *@
                        <form>
                            <div class="form-group">
                                <label for="teamName">Team Name:</label>
                                <input class="form-control" type="text" id="teamName" @bind="newTeam.Name" />
                            </div>
                            <div class="form-group">
                                <label for="teamColor">Team Color:</label>
                                <input class="form-control" type="color" id="teamColor" @bind="newTeam.Color" />
                            </div>
                            <br />
                            <button class="btn btn-primary" type="button" @onclick="AddTeam">Add Team</button>
                        </form>
                    </div>
                </div>
                <p class="text-danger mt-3">@errorMessage</p>
            </div>
        </div>
    </div>
}


@if (showRemoveModal)
{
    <div class="modal show" tabindex="-1" role="dialog" style="display: block;">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirm Removal</h5>
                    <button type="button" class="close" @onclick="ToggleRemoveModal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to remove the team '@(teamToRemove?.Name)' and its associated tasks?</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="ToggleRemoveModal">Cancel</button>
                    <button type="button" class="btn btn-danger" @onclick="() => RemoveTeam(teamToRemove)">Remove</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop show"></div>

}

@if (selectedTeam != null)
{
    <div class="container" style="max-width: 700px;">
        <div class="row">
            <div class="col-12 mb-4">
                @if (selectedTeam.Members != null && selectedTeam.Members.Any())
                {
                    <h4 class="mb-4 font-weight-bold text-center">Team Members for @selectedTeam.Name</h4>

                    <ul>
                        @foreach (var member in selectedTeam.Members)
                        {
                            <li>@member</li>
                        }
                    </ul>
                }
                else
                {
                    <h4 class="mb-4 font-weight-bold text-center">@selectedTeam.Name has no members.</h4>
                }

                @if (selectedTeam.Tasks != null && selectedTeam.Tasks.Any())
                {
                    <style>
                        .list-group-item:hover {
                            background-color: #f0f0f0;
                            /* Change the background color on hover */
                        }
                    </style>
                    <h4 class="mb-4 font-weight-bold text-center">Tasks for @selectedTeam.Name</h4>
                    <div class="list-group">
                        @foreach (var task in selectedTeam.Tasks)
                        {
                            <div class="list-group-item">
                                <div class="d-flex w-100 justify-content-between">
                                    <h5 class="mb-1">@task.Name</h5>
                                    <!-- Add more information if needed -->
                                    <small>Due: @task.EndDate.ToString("yyyy-MM-dd")</small>
                                </div>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <h4 class="mb-4 font-weight-bold text-center">@selectedTeam.Name has no tasks.</h4>
                }
            </div>
        </div>
    </div>
}
else
{
    <h4 class="mb-4 font-weight-bold text-center">Click on a team name to see its information!</h4>
}




@code {
    private List<ProjectTeam> teams;
    private List<TaskData> tasks;
    private ProjectTeam newTeam = new ProjectTeam() { ProjectId = 1 };
    private string errorMessage = "";
    private ProjectTeam selectedTeam;
    private ProjectTeam teamToRemove;
    private bool showRemoveModal = false;
    bool isFormVisible = false;

    protected override async Task OnInitializedAsync()
    {
        teams = ProjectTeamService.GetAllTeams();
        tasks = TaskDataService.GetAllTasks();
    }

    private async Task RefreshData()
    {
        teams = ProjectTeamService.GetAllTeams();
        tasks = tasks = TaskDataService.GetAllTasks();

        StateHasChanged();
    }

    private async Task AddTeam()
    {
        if (string.IsNullOrWhiteSpace(newTeam.Name))
        {
            errorMessage = "Team name is required.";
            return;
        }

        errorMessage = "";

        ProjectTeamService.AddTeam(newTeam);
        teams.Add(newTeam);
        newTeam = new ProjectTeam(); // Reset the new team object after adding
        StateHasChanged();
        ToggleCreateForm();
        await RefreshData();
    }

    private async void RemoveTeam(ProjectTeam team)
    {
        // Remove the team
        ProjectTeamService.RemoveTeam(team);
        //teams.Remove(team);

        // Remove associated tasks
        //TaskDataService.RemoveTasks(team.Tasks);
        //tasks.RemoveAll(task => task.Team == team);


        // Reset the selected team
        if (selectedTeam != null && selectedTeam.Id == team.Id)
        {
            selectedTeam = null;
        }
        ToggleRemoveModal();

        await RefreshData();
    }

    private void EditTeamMembers(ProjectTeam team)
    {

    }
    private void ShowTasksForTeam(ProjectTeam team)
    {
        if (selectedTeam != team)
        {
            selectedTeam = team;
            ProjectTeam.GetTasksForTeam(tasks, team);
        }
        else
        {
            selectedTeam = null;
        }
    }

    private void ToggleRemoveTeamModal(ProjectTeam team)
    {
        teamToRemove = team;
        showRemoveModal = !showRemoveModal;
    }

    private void ToggleRemoveModal()
    {
        showRemoveModal = !showRemoveModal;
    }


    void ToggleCreateForm()
    {
        isFormVisible = !isFormVisible;
        newTeam.Name = "";
        newTeam.Color = "#000";
    }
}
